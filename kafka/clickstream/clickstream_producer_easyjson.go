// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package clickstream

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson76b646c5DecodeGithubComAstronomerioClickstreamEventRouterKafkaClickstream(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "appId":
			out.AppId = string(in.String())
		case "messageId":
			out.MessageID = string(in.String())
		case "integrations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Integrations = make(map[string]bool)
				} else {
					out.Integrations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 bool
					v1 = bool(in.Bool())
					(out.Integrations)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson76b646c5EncodeGithubComAstronomerioClickstreamEventRouterKafkaClickstream(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"appId\":")
	out.String(string(in.AppId))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"messageId\":")
	out.String(string(in.MessageID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"integrations\":")
	if in.Integrations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2First := true
		for v2Name, v2Value := range in.Integrations {
			if !v2First {
				out.RawByte(',')
			}
			v2First = false
			out.String(string(v2Name))
			out.RawByte(':')
			out.Bool(bool(v2Value))
		}
		out.RawByte('}')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson76b646c5EncodeGithubComAstronomerioClickstreamEventRouterKafkaClickstream(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson76b646c5EncodeGithubComAstronomerioClickstreamEventRouterKafkaClickstream(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson76b646c5DecodeGithubComAstronomerioClickstreamEventRouterKafkaClickstream(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson76b646c5DecodeGithubComAstronomerioClickstreamEventRouterKafkaClickstream(l, v)
}
